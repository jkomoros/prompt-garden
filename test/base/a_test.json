{
    "version": 0,
    "seeds": {
        "": {
            "t": "prompt",
            "prompt": "Create a limerick about gardens."
        },
        "hello-world": {
            "t": "log",
            "value": "Hello, world!"
        },
        "composed-prompt": {
            "t": "prompt",
            "description": "Tests that a reference with a # works",
            "prompt": {
                "seed": "hello-world"
            }
        },
        "true": {
            "t": "log",
            "value": true
        },
        "false": {
            "t": "log",
            "value": false
        },
        "if-true": {
            "t": "if",
            "test": {
                "seed": "true"
            },
            "then": {
                "seed": "true"
            },
            "else": {
                "seed": "false"
            }
        },
        "if-false": {
            "t": "if",
            "test": {
                "seed": "false"
            },
            "then": {
                "seed": "true"
            },
            "else": {
                "seed": "false"
            }
        },
        "render-test": {
            "t": "render",
            "template": "{{name}} is {{age}}",
            "vars": {
                "name": "Bob",
                "age": "5"
            }
        },
        "extract-test": {
            "t": "extract",
            "template": "{{name}} is {{age}}",
            "input": "Alex is 5"
        },
        "non-computed-object": {
            "t": "object",
            "properties": {
                "a": 5,
                "b": true
            }
        },
        "computed-object": {
            "t": "object",
            "properties": {
                "a": {
                    "t": "log",
                    "value": 5
                },
                "b": true
            }
        },
        "computed-array": {
            "t": "array",
            "items": [
                3,
                {
                    "t": "log",
                    "value": 5
                }
            ]
        },
        "let-test": {
            "t": "let",
            "name": "foo",
            "value": {
                "t": "log",
                "value": 3
            },
            "block": {
                "t": "render",
                "template": "{{age}} is great",
                "vars": {
                    "t": "object",
                    "properties": {
                        "age": {
                            "t": "var",
                            "name": "foo"
                        }
                    }
                }
            }
        },
        "let-multi-test": {
            "t": "let-multi",
            "values": {
                "t": "object",
                    "properties": {
                    "name": "Alex",
                    "foo": {
                        "t": "log",
                        "value": 3
                    }
                }
            },
            "block": {
                "t": "render",
                "template": "{{age}} is {{name}}",
                "vars": {
                    "t": "object",
                    "properties": {
                        "age": {
                            "t": "var",
                            "name": "foo"
                        },
                        "name": {
                            "t": "var",
                            "name": "name"
                        }
                    }
                }
            }
        },
        "let-test-secret-key": {
            "t": "let",
            "name": "openai_secret_key",
            "value": 5,
            "block": 5
        },
        "embed-test": {
            "t": "embed",
            "text": "This is text to embed"
        },
        "memorize-test": {
            "t": "memorize",
            "value": "Apple"
        },
        "memorize-multiple-test": {
            "t": "memorize",
            "value": [
                "Apple",
                "Carrot",
                "Cake",
                "Car"
            ]
        },
        "recall-test": {
            "t": "recall",
            "query": "Broccoli",
            "k": 5
        },
        "recall-test-no-k": {
            "t": "recall",
            "query": "Broccoli"
        },
        "embedding-as-string": {
            "t": "render",
            "template": {
                "t": "embed",
                "text": "This is an embedding"
            },
            "vars": {}
        },
        "token-count-test": {
            "t": "token_count",
            "text": "abcdefgh"
        },
        "token-count-multiple-test": {
            "t": "token_count",
            "text": [
                "abcd",
                "abcdefgh"
            ]
        },
        "store-test": {
            "t": "store",
            "name": "foo",
            "value": 3
        },
        "retrieve-test": {
            "t": "retrieve",
            "name": "foo"
        },
        "delete-test": {
            "t": "delete",
            "name": "foo"
        },
        "private": {
            "t": "noop",
            "private": true,
            "value": true
        },
        "reference-test": {
            "t": "reference",
            "seed_id": "private"
        },
        "dynamic-test": {
            "t": "dynamic",
            "reference": {
                "t": "reference",
                "seed_id": "private"
            }
        },
        "dynamic-remote-test": {
            "t": "dynamic",
            "reference": {
                "t": "reference",
                "packet": "https://raw.githubusercontent.com/jkomoros/prompt-garden/main/seeds/example-basic.json",
                "seed_id": "private"
            }
        },
        "keys-test": {
            "t": "keys",
            "object": [
                "a",
                "b"
            ]
        },
        "map-object-test": {
            "t": "map",
            "items": {
                "a": 3,
                "b": 4
            },
            "block": {
                "t": "render",
                "template": "{{key}}:{{value}}",
                "vars": {
                    "key": {
                        "t": "var",
                        "name": "key"
                    },
                    "value": {
                        "t": "var",
                        "name": "value"
                    }
                }
            }
        },
        "map-array-test": {
            "t": "map",
            "items": [
                3,
                4
            ],
            "block": {
                "t": "render",
                "template": "{{key}}:{{value}}",
                "vars": {
                    "key": {
                        "t": "var",
                        "name": "key"
                    },
                    "value": {
                        "t": "var",
                        "name": "value"
                    }
                }
            }
        },
        "filter-object-test": {
            "t": "filter",
            "items": {
                "a": 3,
                "b": 4
            },
            "block": {
                "t": "==",
                "a": {
                    "t": "var",
                    "name": "value"
                },
                "b": 3
            }
        },
        "filter-array-test": {
            "t": "filter",
            "items": [
                3,
                4
            ],
            "block": {
                "t": "==",
                "a": {
                    "t": "var",
                    "name": "value"
                },
                "b": 3
            }
        },
        "throw-test": {
            "t": "throw",
            "error": "This is an error"
        },
        "var-with-value-set": {
            "t": "let",
            "name": "val",
            "value": 3,
            "block": {
                "t": "var",
                "name": "val",
                "else": {
                    "t": "throw",
                    "error": "This shouldn't happen since val is set"
                }
            }
        },
        "var-without-value-set": {
            "t": "var",
            "name": "val",
            "else": 5
        },
        "retrieve-with-value-set": {
            "t": "array",
            "return": "last",
            "items": [
                {
                    "t": "store",
                    "name": "val",
                    "value": 3
                },
                {
                    "t": "retrieve",
                    "name": "val",
                    "else": {
                        "t": "throw",
                        "error": "This shouldn't happen since val is set"
                    }
                }
            ]
        },
        "retrieve-without-value-set": {
            "t": "retrieve",
            "name": "val",
            "else": 5
        },
        "random-test": {
            "t": "random"
        },
        "split-test": {
            "t": "split",
            "input": "one:two",
            "delimiter": ":"
        },
        "join-test": {
            "t": "join",
            "items": [
                "one",
                "two"
            ],
            "delimiter": ":"
        },
        "dotted-property-test": {
            "t": "property",
            "object": {
                "a": [
                    0,
                    1,
                    2
                ]
            },
            "property": "a.1"
        },
        "fetch-test": {
            "t": "fetch",
            "resource": "https://raw.githubusercontent.com/jkomoros/prompt-garden/main/seeds/example-basic.json",
            "method": "POST"
        },
        "function-test": {
            "t": "function",
            "arguments": [
                "arg:message"
            ],
            "block": {
                "t": "log",
                "value": {
                    "t": "var",
                    "name": "arg:message"
                }
            }
        },
        "function-with-defaults-test": {
            "t": "function",
            "arguments": [
                "arg:message"
            ],
            "defaults": {
                "arg:message": "Blammo"
            },
            "block": {
                "t": "log",
                "value": {
                    "t": "var",
                    "name": "arg:message"
                }
            }
        },
        "call-test": {
            "t": "call",
            "function": {
                "seed": "function-test"
            },
            "arguments": {
                "arg:message": "Test"
            }
        },
        "call-without-arg-test": {
            "t": "call",
            "function": {
                "seed": "function-test"
            },
            "arguments": {}
        },
        "call-default-test": {
            "t": "call",
            "function": {
                "seed": "function-with-defaults-test"
            },
            "arguments": {}
        },
        "spread-array-test": {
            "t": "spread",
            "a": [
                0,
                1
            ],
            "b": 2
        },
        "spread-object-test": {
            "t": "spread",
            "a": {
                "a": 0,
                "b": 1
            },
            "b": {
                "c": 2
            }
        },
        "index-string-test": {
            "t": "index",
            "container": "foobar",
            "search": "bar"
        },
        "index-object-test": {
            "t": "index",
            "container": {
                "a": 0,
                "b": 1
            },
            "search": 1
        },
        "index-array-test": {
            "t": "index",
            "container": [
                0,
                1,
                2
            ],
            "search": 1
        },
        "slice-string-test": {
            "t": "slice",
            "input": "012345"
        },
        "slice-array-test": {
            "t": "slice",
            "input": [
                0,
                1,
                2,
                3
            ],
            "end": -1
        }
    }
}